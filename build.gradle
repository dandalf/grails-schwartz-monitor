buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        jcenter()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.8.2"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
    }
}

version file('version.txt').text.trim()
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin: 'idea'
apply plugin: "org.grails.grails-plugin"
apply plugin: 'org.grails.grails-plugin-publish'
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin: 'org.asciidoctor.convert'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.8.2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    compile "com.agileorbit:schwartz:1.0.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

grailsPublish {
    desc = 'Schwartz Monitor'
    developers = [robertoschwald: 'Robert Oschwald']
    githubSlug = 'agileorbit/grails-schwartz-monitor'
    issueTrackerUrl = 'https://github.com/robertoschwald/grails-schwartz-monitor/issues'
    license {
        name = 'Apache-2.0'
    }
    title = 'Schwartz Monitor Plugin'
    repo = 'grails-plugins'
    vcsUrl = 'https://github.com/robertoschwald/grails-schwartz-monitor/'
}

task docs(dependsOn: [asciidoctor, org.gradle.api.tasks.javadoc.Groovydoc]) << {
    File dir = new File(buildDir, 'docs')

    ['pdf', 'epub'].each { String ext ->
        File f = new File(dir, 'index.' + ext)
        if (f.exists()) {
            f.renameTo new File(dir, project.name + '-' + project.version + '.' + ext)
        }
    }

    new File(buildDir, 'docs/ghpages.html') << file('src/docs/index.tmpl').text.replaceAll('@VERSION@', project.version)

    copy {
        from 'src/docs'
        into new File(buildDir, 'docs').path
        include '**/*.jpg', '**/*.png'
    }
}

asciidoctor {
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
    outputDir new File(buildDir, 'docs')
    backends 'html5', 'pdf', 'epub3'
    attributes  copyright  : 'Apache License, Version 2.0',
      docinfo1             : 'true',
      doctype              : 'book',
      encoding             : 'utf-8',
      'front-cover-image'  : 'image:cover.png[Front Cover,800,600]',
      icons                : 'font',
      id                   : project.name + ':' + project.version,
      idprefix             : '',
      idseparator          : '-',
      lang                 : 'en',
      linkattrs            : true,
      numbered             : '',
      producer             : 'Asciidoctor',
      revnumber            : project.version,
      setanchors           : true,
      'source-highlighter'  : 'prettify',
      toc                  : 'left',
      toc2                 : '',
      toclevels            : '2'
}

